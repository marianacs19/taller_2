select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
# Cutoff
pred_val <- predict(modelo_lineal, newdata = valid_fit)
cutoff <- seq(0.10, 0.90, by = 0.05)
f1_scores <- sapply(cutoff, function(t) {
pred_bin <- ifelse(pred_val > t, 1, 0)
cm <- confusionMatrix(
data      = as.factor(pred_bin),
reference = as.factor(valid_fit$Pobre),
positive  = "1"
)
prec <- cm$byClass["Precision"]
rec  <- cm$byClass["Recall"]
2 * (prec * rec) / (prec + rec)
})
best_t  <- cutoff[which.max(f1_scores)]
best_f1 <- max(f1_scores)
cat("Cutoff =", best_t, "con F1 =", round(best_f1, 3), "\n")
# Fuera de muestra
test_mod <- test %>%
select(all_of(vars_modelo)) %>%
mutate(across(everything(), ~replace_na(., 0)))
pred_test <- predict(modelo_lineal, newdata = test_mod)
# Fuera de muestra
test_mod <- test %>%
select(all_of(vars_modelo)) %>%
mutate(across(everything(), ~replace_na(., 0)))
# Fuera de muestra
test_mod <- test %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
View(test)
# Fuera de muestra
pred_test <- predict(modelo_lineal, newdata = test)
pred_test_class <- ifelse(pred_test > best_t, 1, 0)
# Archivo
prediccion <- tibble(id = test$id, Pobre = pred_test_class)
View(prediccion)
vars_modelo <- c(
"Urbano", "Nivel_educativo_jefe", "Subsidio_familiar_hogar",
"Personas_hogar", "Mujer_jefe", "Años_educ_mean_hogar", "Oficio_jefe",
"Asalariados_hogar", "Educados_hogar", "Afiliados_salud_hogar"
)
train$Pobre <- ifelse(train$Pobre == "Pobre", 1, 0)
train_mod <- train %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
vars_modelo <- c(
"Urbano", "Nivel_educativo_jefe", "Subsidio_familiar_hogar",
"Personas_hogar", "Mujer_jefe", "Años_educ_mean_hogar", "Oficio_jefe",
"Asalariados_hogar", "Educados_hogar","Arriendo_pagado_mensual","Afiliados_salud_hogar"
)
train$Pobre <- ifelse(train$Pobre == "Pobre", 1, 0)
train_mod <- train %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
# Modelo 1 regresión lineal -----------------------------------------------------
# Definir variables
names(train)
# Limpieza y paquetes -----------------------------------------------------
rm(list = ls())
library(pacman)
p_load(rio,
tidyverse,
glmnet,
caret,
scatterplot3d,
plotly
)
library(dplyr)
library(e1071)
library(rpart)
library(rpart.plot)
library(forcats)
# Estableciendo rutas -----------------------------------------------------
wd_main <- "taller_2"
wd_code <- "scripts"
wd_outputs <- "Estimations"
wd_data <- "Data"
# Cargando bases -----------------------------------------------------
train <- load(paste0(wd_data, "/train_def.RData"))
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/test_def.RData")
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/train_def.RData")
train <- train_def
test  <- test_def
# Modelo 1 regresión lineal -----------------------------------------------------
# Definir variables
names(train)
vars_modelo <- c(
"Urbano", "Nivel_educativo_jefe", "Subsidio_familiar_hogar",
"Personas_hogar", "Mujer_jefe", "Años_educ_mean_hogar", "Oficio_jefe",
"Asalariados_hogar", "Educados_hogar","Arriendo_pagado_mensual" ,"Afiliados_salud_hogar"
)
train$Pobre <- ifelse(train$Pobre == "Pobre", 1, 0)
train_mod <- train %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
# Limpieza y paquetes -----------------------------------------------------
rm(list = ls())
library(pacman)
p_load(rio,
tidyverse,
glmnet,
caret,
scatterplot3d,
plotly
)
library(dplyr)
library(e1071)
library(rpart)
library(rpart.plot)
library(forcats)
# Estableciendo rutas -----------------------------------------------------
wd_main <- "taller_2"
wd_code <- "scripts"
wd_outputs <- "Estimations"
wd_data <- "Data"
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/test_def.RData")
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/train_def.RData")
train <- train_def
test  <- test_def
# Modelo 1 regresión lineal -----------------------------------------------------
# Definir variables
names(train)
vars_modelo <- c(
"Urbano", "Nivel_educativo_jefe", "Subsidio_familiar_hogar",
"Personas_hogar", "Mujer_jefe", "Años_educ_mean_hogar", "Oficio_jefe",
"Asalariados_hogar", "Educados_hogar" ,"Afiliados_salud_hogar"
)
train$Pobre <- ifelse(train$Pobre == "Pobre", 1, 0)
train_mod <- train %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
# Cutoff
pred_val <- predict(modelo_lineal, newdata = valid_fit)
cutoff <- seq(0.10, 0.90, by = 0.05)
f1_scores <- sapply(cutoff, function(t) {
pred_bin <- ifelse(pred_val > t, 1, 0)
cm <- confusionMatrix(
data      = as.factor(pred_bin),
reference = as.factor(valid_fit$Pobre),
positive  = "1"
)
prec <- cm$byClass["Precision"]
rec  <- cm$byClass["Recall"]
2 * (prec * rec) / (prec + rec)
})
best_t  <- cutoff[which.max(f1_scores)]
best_f1 <- max(f1_scores)
cat("Cutoff =", best_t, "con F1 =", round(best_f1, 3), "\n")
# Fuera de muestra
pred_test <- predict(modelo_lineal, newdata = test)
pred_test_class <- ifelse(pred_test > best_t, 1, 0)
# Archivo
prediccion <- tibble(id = test$id, Pobre = pred_test_class)
View(prediccion)
train <- train %>%
mutate(arriendo_compilado_hogar = coalesce(Arriendo_estimado_mensual, Arriendo_pagado_mensual))
test <- test %>%
mutate(arriendo_compilado_hogar = coalesce(Arriendo_estimado_mensual, Arriendo_pagado_mensual))
vars_modelo <- c(
"Urbano", "Nivel_educativo_jefe", "Subsidio_familiar_hogar",
"Personas_hogar", "Mujer_jefe", "Años_educ_mean_hogar", "Oficio_jefe",
"Asalariados_hogar", "Educados_hogar" ,"arriendo_compilado_hogar","Afiliados_salud_hogar"
)
train$Pobre <- ifelse(train$Pobre == "Pobre", 1, 0)
train_mod <- train %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
# Cutoff
pred_val <- predict(modelo_lineal, newdata = valid_fit)
cutoff <- seq(0.10, 0.90, by = 0.05)
f1_scores <- sapply(cutoff, function(t) {
pred_bin <- ifelse(pred_val > t, 1, 0)
cm <- confusionMatrix(
data      = as.factor(pred_bin),
reference = as.factor(valid_fit$Pobre),
positive  = "1"
)
prec <- cm$byClass["Precision"]
rec  <- cm$byClass["Recall"]
2 * (prec * rec) / (prec + rec)
})
# Limpieza y paquetes -----------------------------------------------------
rm(list = ls())
library(pacman)
p_load(rio,
tidyverse,
glmnet,
caret,
scatterplot3d,
plotly
)
library(dplyr)
library(e1071)
library(rpart)
library(rpart.plot)
library(forcats)
# Estableciendo rutas -----------------------------------------------------
wd_main <- "taller_2"
wd_code <- "scripts"
wd_outputs <- "Estimations"
wd_data <- "Data"
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/test_def.RData")
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/train_def.RData")
train <- train_def
test  <- test_def
train <- train %>%
mutate(arriendo_compilado_hogar = coalesce(Arriendo_estimado_mensual, Arriendo_pagado_mensual))
test <- test %>%
mutate(arriendo_compilado_hogar = coalesce(Arriendo_estimado_mensual, Arriendo_pagado_mensual))
# Modelo 1 regresión lineal -----------------------------------------------------
# Definir variables
names(train)
vars_modelo <- c(
"Urbano", "Nivel_educativo_jefe", "Subsidio_familiar_hogar",
"Personas_hogar", "Mujer_jefe", "Años_educ_mean_hogar", "Oficio_jefe",
"Asalariados_hogar", "Educados_hogar" ,"arriendo_compilado_hogar","Afiliados_salud_hogar"
)
train$Pobre <- ifelse(train$Pobre == "Pobre", 1, 0)
train_mod <- train %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
# Cutoff
pred_val <- predict(modelo_lineal, newdata = valid_fit)
cutoff <- seq(0.10, 0.90, by = 0.05)
f1_scores <- sapply(cutoff, function(t) {
pred_bin <- ifelse(pred_val > t, 1, 0)
cm <- confusionMatrix(
data      = as.factor(pred_bin),
reference = as.factor(valid_fit$Pobre),
positive  = "1"
)
prec <- cm$byClass["Precision"]
rec  <- cm$byClass["Recall"]
2 * (prec * rec) / (prec + rec)
})
best_t  <- cutoff[which.max(f1_scores)]
best_f1 <- max(f1_scores)
cat("Cutoff =", best_t, "con F1 =", round(best_f1, 3), "\n")
# Fuera de muestra
pred_test <- predict(modelo_lineal, newdata = test)
pred_test_class <- ifelse(pred_test > best_t, 1, 0)
# Archivo
prediccion <- tibble(id = test$id, Pobre = pred_test_class)
View(prediccion)
View(train)
rm(list = ls())
library(pacman)
p_load(rio,           # import/export data
tidyverse,     # tidy-data
glmnet,        # To implement regularization algorithms.
caret,         # Creating predictive models
scatterplot3d, # For 3D visualization
plotly         # For interactive 3D plots
)
library(caret)
library(dplyr)
library(e1071)
library(glmnet)
library(rpart)
library(rpart.plot)
library(forcats)
# 1) Directorio y carga ----
setwd("/Users/marianacorrea/Desktop/PEG/Big data/Taller 2/taller_2/Data")
train <- read_delim("train_collpase_hogar.csv", delim = ";")
test  <- read_delim("test_collpase_hogar.csv",  delim = ";")
# Limpieza y paquetes -----------------------------------------------------
rm(list = ls())
library(pacman)
p_load(rio,
tidyverse,
glmnet,
caret,
scatterplot3d,
plotly
)
library(dplyr)
library(e1071)
library(rpart)
library(rpart.plot)
library(forcats)
# Estableciendo rutas -----------------------------------------------------
wd_main <- "taller_2"
wd_code <- "scripts"
wd_outputs <- "Estimations"
wd_data <- "Data"
train <- train_def
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/test_def.RData")
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/train_def.RData")
train <- train_def
test  <- test_def
# Modelo 1 regresión lineal -----------------------------------------------------
# Definir variables
names(train)
vars_modelo <- c(
"Urbano", "Nivel_educativo_jefe", "Subsidio_familiar_hogar",
"Personas_hogar", "Mujer_jefe", "Años_educ_mean_hogar",
"Asalariados_hogar", "Educados_hogar","Afiliados_salud_hogar"
)
train$Pobre <- ifelse(train$Pobre == "Pobre", 1, 0)
train_mod <- train %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
# Cutoff
pred_val <- predict(modelo_lineal, newdata = valid_fit)
cutoff <- seq(0.10, 0.90, by = 0.05)
f1_scores <- sapply(cutoff, function(t) {
pred_bin <- ifelse(pred_val > t, 1, 0)
cm <- confusionMatrix(
data      = as.factor(pred_bin),
reference = as.factor(valid_fit$Pobre),
positive  = "1"
)
prec <- cm$byClass["Precision"]
rec  <- cm$byClass["Recall"]
2 * (prec * rec) / (prec + rec)
})
best_t  <- cutoff[which.max(f1_scores)]
best_f1 <- max(f1_scores)
cat("Cutoff =", best_t, "con F1 =", round(best_f1, 3), "\n")
# Fuera de muestra
pred_test <- predict(modelo_lineal, newdata = test)
pred_test_class <- ifelse(pred_test > best_t, 1, 0)
# Archivo
prediccion <- tibble(id = test$id, Pobre = pred_test_class)
View(prediccion)
train <- train %>%
mutate(arriendo_compilado_hogar = coalesce(Arriendo_estimado_mensual, Arriendo_pagado_mensual))
test <- test %>%
mutate(arriendo_compilado_hogar = coalesce(Arriendo_estimado_mensual, Arriendo_pagado_mensual))
# Modelo 1 regresión lineal -----------------------------------------------------
# Definir variables
names(train)
vars_modelo <- c(
"Urbano", "Nivel_educativo_jefe", "Subsidio_familiar_hogar",
"Personas_hogar", "Mujer_jefe", "Años_educ_mean_hogar", "arriendo_compilado_hogar",
"Asalariados_hogar", "Educados_hogar","Afiliados_salud_hogar"
)
train$Pobre <- ifelse(train$Pobre == "Pobre", 1, 0)
train_mod <- train %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
# Cutoff
pred_val <- predict(modelo_lineal, newdata = valid_fit)
cutoff <- seq(0.10, 0.90, by = 0.05)
f1_scores <- sapply(cutoff, function(t) {
pred_bin <- ifelse(pred_val > t, 1, 0)
cm <- confusionMatrix(
data      = as.factor(pred_bin),
reference = as.factor(valid_fit$Pobre),
positive  = "1"
)
prec <- cm$byClass["Precision"]
rec  <- cm$byClass["Recall"]
2 * (prec * rec) / (prec + rec)
})
# Limpieza y paquetes -----------------------------------------------------
rm(list = ls())
library(pacman)
p_load(rio,
tidyverse,
glmnet,
caret,
scatterplot3d,
plotly
)
library(dplyr)
library(e1071)
library(rpart)
library(rpart.plot)
library(forcats)
# Estableciendo rutas -----------------------------------------------------
wd_main <- "taller_2"
wd_code <- "scripts"
wd_outputs <- "Estimations"
wd_data <- "Data"
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/train_def.RData")
load("~/Desktop/PEG/Big data/Taller 2/taller_2/Data/test_def.RData")
train <- train_def
test  <- test_def
train <- train %>%
mutate(arriendo_compilado_hogar = coalesce(Arriendo_estimado_mensual, Arriendo_pagado_mensual))
test <- test %>%
mutate(arriendo_compilado_hogar = coalesce(Arriendo_estimado_mensual, Arriendo_pagado_mensual))
# Modelo 1 regresión lineal -----------------------------------------------------
# Definir variables
names(train)
vars_modelo <- c(
"Urbano", "Nivel_educativo_jefe", "Subsidio_familiar_hogar",
"Personas_hogar", "Mujer_jefe", "Años_educ_mean_hogar", "arriendo_compilado_hogar",
"Asalariados_hogar", "Educados_hogar","Afiliados_salud_hogar"
)
train$Pobre <- ifelse(train$Pobre == "Pobre", 1, 0)
train_mod <- train %>%
select(Pobre, all_of(vars_modelo)) %>%
drop_na()
# Dividir la muestra
set.seed(123)
idx <- sample(1:nrow(train_mod), 0.7 * nrow(train_mod))
train_fit <- train_mod[idx, ]
valid_fit <- train_mod[-idx, ]
# Modelo
modelo_lineal <- lm(Pobre ~., data = train_fit)
summary(modelo_lineal)
# Cutoff
pred_val <- predict(modelo_lineal, newdata = valid_fit)
cutoff <- seq(0.10, 0.90, by = 0.05)
f1_scores <- sapply(cutoff, function(t) {
pred_bin <- ifelse(pred_val > t, 1, 0)
cm <- confusionMatrix(
data      = as.factor(pred_bin),
reference = as.factor(valid_fit$Pobre),
positive  = "1"
)
prec <- cm$byClass["Precision"]
rec  <- cm$byClass["Recall"]
2 * (prec * rec) / (prec + rec)
})
best_t  <- cutoff[which.max(f1_scores)]
best_f1 <- max(f1_scores)
cat("Cutoff =", best_t, "con F1 =", round(best_f1, 3), "\n")
# Fuera de muestra
pred_test <- predict(modelo_lineal, newdata = test)
pred_test_class <- ifelse(pred_test > best_t, 1, 0)
# Archivo
prediccion <- tibble(id = test$id, Pobre = pred_test_class)
View(prediccion)
write.csv(prediccion, paste0(wd_outputs, "/modelo_regresion.csv"), row.names = FALSE)
# Archivo
prediccion <- tibble(id = test$id, Pobre = pred_test_class)
write.csv(prediccion, paste0(wd_outputs, "/modelo_regresion.csv"), row.names = FALSE)
write.csv(prediccion, (paste0(wd_outputs, "/modelo_regresion.csv")), row.names = FALSE)
write.csv(prediccion, (paste0(wd_outputs, "/modelo_regresion.csv"), row.names = FALSE))
write.csv(prediccion, (paste0(wd_outputs, "/modelo_regresion.csv") row.names = FALSE))
write.csv(prediccion, (paste0(wd_outputs, "/modelo_regresion.csv"), row.names = FALSE))
write.csv(prediccion, paste0(wd_outputs, "/modelo_regresion.csv"), row.names = FALSE)
getwd()           # muestra el directorio actual
file.exists(wd_outputs)   # confirma si la carpeta existe
